# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {
        'w': 'session-save',
        'q': 'quit',
        'wq': 'quit --save',
        'face': 'open www.facebook.com',
        'FACE': 'open -t www.facebook.com',
        'maps': 'open www.google.com/maps',
        'tr': 'open www.translate.google.com',
        'y': 'open www.youtube.com',
        'Y': 'open -t www.youtube.com',
        'youtube': 'open www.youtube.com',
        'reddit': 'open www.reddit.com',
        'd': 'download-open',
        'gmusic': 'open play.google.com/music'
        }

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications', False, 'https://www.reddit.com')

# Number of commands to save in the command history. 0: no history / -1:
# unlimited
# Type: Int
c.completion.cmd_history_max_items = 100

# Padding (in pixels) of the scrollbar handle in the completion window.
# Type: Int
c.completion.scrollbar.padding = 2

# Delay (in milliseconds) before updating completions after typing a
# character.
# Type: Int
c.completion.delay = 0

# Minimum amount of characters needed to update completions.
# Type: Int
c.completion.min_chars = 1

# Directory to save downloads to. If unset, a sensible OS-specific
# default is used.
# Type: Directory
c.downloads.location.directory = '~/Downloads'

# Prompt the user for the download location. If set to false,
# `downloads.location.directory` will be used.
# Type: Bool
c.downloads.location.prompt = False

# Which categories to show (in which order) in the :open completion.
# Type: FlagList
# Valid values:
#   - searchengines
#   - quickmarks
#   - bookmarks
#   - history
c.completion.open_categories = ['searchengines', 'quickmarks', 'bookmarks', 'history']

# Duration (in milliseconds) to wait before removing finished downloads.
# If set to -1, downloads are never removed.
# Type: Int
c.downloads.remove_finished = 15000

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['st', '-e', 'nvim', '{}']

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://www.google.com/'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://google.com/search?&q={}',
        'i': 'https://google.com/search?q={}&tbm=isch',
        'images': 'https://google.com/search?q={}&tbm=isch',
        'maps': 'https://www.google.com/maps/search/{}',
        'aw': 'https://wiki.archlinux.org/index.php?search={}',
        'y': 'https://www.youtube.com/results?search_query={}',
        'yr': 'https://www.yr.no/soek/soek.aspx?sted={}',
        'youtube': 'https://www.youtube.com/results?search_query={}',
        'gmusic': 'https://play.google.com/music/listen#/sr/{}',
        'imdb' : 'https://www.imdb.com/find?q={}',
        'netflix' : 'https://www.netflix.com/search?q={}'
        }

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'www.google.com'

# Color for the tab indicator on errors.
# Type: QtColor
c.colors.tabs.indicator.error = '#ff0000'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = 'grey'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = 'black'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = 'grey'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = 'black'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = 'black'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = 'lightgrey'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = 'black'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = 'lightgrey'

# Foreground color of pinned unselected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.odd.fg = 'white'

# Background color of pinned unselected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.odd.bg = 'seagreen'

# Foreground color of pinned unselected even tabs.
# Type: QtColor
c.colors.tabs.pinned.even.fg = 'white'

# Background color of pinned unselected even tabs.
# Type: QtColor
c.colors.tabs.pinned.even.bg = 'darkseagreen'

# Foreground color of pinned selected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.odd.fg = 'black'

# Background color of pinned selected odd tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.odd.bg = 'lightgrey'

# Foreground color of pinned selected even tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.even.fg = 'black'

# Background color of pinned selected even tabs.
# Type: QtColor
c.colors.tabs.pinned.selected.even.bg = 'white'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = None

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '13pt monospace'

# Font family for cursive fonts.
# Type: FontFamily
c.fonts.web.family.cursive = None

# Bindings for normal mode
config.bind('gc', 'hint links userscript /home/otislevoll/.local/share/qutebrowser/userscripts/cast')
config.bind('gd', 'set downloads.location.directory ~/Downloads ;; hint images download')
config.bind('gi', 'set downloads.location.directory ~/Pictures ;; hint images download')
config.bind('gq', 'hint links userscript /home/otislevoll/.local/share/qutebrowser/userscripts/cast_queue')

# Open previous link in new background tab & move it to the left of current tab
config.bind('<Ctrl-Shift-h>', 'back -b ;; tab-move +')
# Open next link in new background tab
config.bind('<Ctrl-Shift-l>', 'forward -b')

# Move tab to position <num>
config.bind('<Alt-Shift-!>', 'tab-move 1')
config.bind('<Alt-Shift-">', 'tab-move 2')
config.bind('<Alt-Shift-#>', 'tab-move 3')
config.bind('<Alt-Shift-Â¤>', 'tab-move 4')
config.bind('<Alt-Shift-%>', 'tab-move 5')
config.bind('<Alt-Shift-&>', 'tab-move 6')
config.bind('<Alt-Shift-/>', 'tab-move 7')
config.bind('<Alt-Shift-(>', 'tab-move 8')
config.bind('<Alt-Shift-)>', 'tab-move 9')
